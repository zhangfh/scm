/*! @file
********************************************************************************
<PRE>
模块名       : RS232串口接口头文件
文件名       : RS232.h
相关文件     : RS232.cpp
文件实现功能 : 提供RS232串口接口定义
作者         : 陈宇
版本         : 1.0
--------------------------------------------------------------------------------
多线程安全性 : 否, 支持多线程
异常时安全性 : 是, 满足资源申请即初始化准则
--------------------------------------------------------------------------------
备注         : -
--------------------------------------------------------------------------------
修改记录 : 
日  期          版本            修改人          修改内容 
2013/05/5       1.0                   陈宇               创建
</PRE>
********************************************************************************
* 版权所有(c) 2013, 陈宇, 保留所有权利
*******************************************************************************/

/*******************************************************************************
* 防止头文件被重复引用
*******************************************************************************/
#ifndef _RS232_H_
#define _RS232_H_

/*******************************************************************************
* 引用标准库的头文件
*******************************************************************************/

/*******************************************************************************
* 引用当前工程中的头文件
*******************************************************************************/
#include "../../config.h"

/*******************************************************************************
* 宏定义声明
*******************************************************************************/
// 串行口控制寄存器
// SCON:D7	D6	D5	D4	D3	D2	D1	D0
//	　　SM0 SM1 SM2 REN TB8 RB8 TI	RI

// SM0、SM1(bit7-bit6)：串行口工作模式控制位
// 00 模式0 移位寄存器I/O模式
// 可外接移位寄存器，一扩展I/O口，也可外接同步I/O设备。 
// 发送操作：当执行一条“MOV SBUF,A”指令时，启动发送操作，由TXD输出移位脉冲，
// 由RXD串行SBUF中的数据。发送完8位数据后自动置TI=1.请求中断。要继续发送时，
// TI必须有指令清零。
// 接收操作：REN是串行口接收允许控制位。REN=0时禁止接收；REN=1时允许接收。
// 当软件将REN置“1”时，即开始从RXD端口以fosc/12波特率输入数据，当接收到8位数据时，
// 将中断标志RI置“1”。再次接收数据之前，必须用软件将RI清0。
// 01 模式1 10位通用异步通讯模式
// 发送或接收一帧数据信息为10位，包括1位起始位“0”、8位数据位、1位停止位“1”。
// 发送数据：数据从TXD端口输出，当数据写入发送缓冲器SBUF时，就启动发送器发送。
// 发送完一帧数据后，置中断标志TI=1，申请中断，通知CPU可以发送下一个数据了。
// 接收数据：首先使REN=1（允许接收数据），串行口从RXD接收数据，当采样到1至0跳变时，
// 确认是起始位“0”，就开始接收一帧数据，当接收完一帧数据时，置中断标志RI=1，
// 申请中断，通知CPU从SBUF取走接收到的数据 。
// 10 模式2 11位异步通信模式
// 发送或接收一帧信息包括1位起始位“0”、8位数据位、1位可编程位、1位停止位“1”。
// 发送数据：发送前，先根据通信协议由软件设置TB8为“奇偶校验位”或“数据标识位”，
// 然后将要发送的数据写入SBUF，即能启动发送器。发送过程是由执行任何一条以SBUF为
// 目的寄存器的指令而启动的，把8位数据装入SBUF，同时还把TB8装到发送移位寄存器的第9位上，
// 然后从TXD（P3.1）端口输出一帧数据。
// 接收数据：先置REN=1，使串行口为允许接收状态，同时还要将RI清“0”。然后再根据SM2的状态
// 和所接收到的RB8的状态决定此串行口在信息到来后是否置R1=1，并申请中断，通知CPU接收数据。
// 当SM2=0时，不管RB8为“0”还是为“1”，都置RI=1，此串行口将接收发送来的信息。当SM2=1时，
// 且RB8=1，表示在多机通信情况下，接收的信息为“地址帧”, 此时置RI=1, 串行口将接收发来的地址。
// 当SM2=1时，且RB8=0，表示在多机通信情况下，接收的信息为“数据帧”, 但不是发给本从机的，
// 此时RI不置为“1”，因而SBUF中接收的数据帧将丢失。
// 11 模式3 波特率可变的11位异步通信模式
// 除了波特率有所区别之外，其余方式都与方式2相同。

// SM2(bit5)：多机通信控制位
// 多机通信是工作于模式2和模式3，SM2位主要用于模式2和模式3。
// 接收状态，当串行口工作于模式2或3，以及SM2=1时，只有当接收到第9位数据（RB8）为1时，
// 才把接收到的前8位数据送入SBUF，且置位RI发出中断申请，否则会将接受到的数据放弃。
// 当SM2=0时，就不管第9位数据是0还是1，都会将数据送入SBUF，并发出中断申请。
// 工作于模式0时，SM2必须为0。

// REN(bit4)：允许接收位
// REN用于控制数据接收的允许和禁止，REN=1时，允许接收，REN=0时，禁止接收。 

// TB8(bit3)：发送接收数据位8
// 在模式2和模式3中，TB8是要发送的――即第9位数据位。在多机通信中同样亦要传输这一位，
// 并且它代表传输的地址还是数据，TB8=0为数据，TB8=1时为地址。 

// RB8(bit2)：接收数据位8
// 在模式2和模式3中，RB8存放接收到的第9位数据，用以识别接收到的数据特征。

// TI(bit1)：发送中断标志位
// 可寻址标志位。模式0时，发送完第8位数据后，由硬件置位，其它模式下，
// 在发送或停止位之前由硬件置位，因此，TI=1表示帧发送结束，TI可由软件清“0”。

// RI(bit0)：接收中断标志位
// 可寻址标志位。接收完第8位数据后，该位由硬件置位，在其他工作模式下，该位由硬件置位，
// RI=1表示帧接收完成。
// 在串口中断处理时，TI，RI都需要软件清"0"，硬件置位后不可能自动清0，此外，
// 在进行缓冲区操作时，需要ES=0，以防止中断出现。 

#define SCON_UART_MODE_0	0x00
#define SCON_UART_MODE_1	0x40
#define SCON_UART_MODE_2	0x80
#define SCON_UART_MODE_3    0xC0
	
#define SCON_UART_SM2_ENABLE	0x20
#define SCON_UART_REN_ENABLE	0x10

// 电源管理寄存器
// PCON:D7	D6	D5	D4	D3	D2	D1	D0
//		SMOD-	-	-	GF1 GF0 PD	IDL
// 在CHMOS型单片机中，除SMOD位外，其他位均为虚设的。
// SMOD(bit7):串行口波特率倍增位
// 系统复位默认SMOD=0。串口模式1，2，3时，SMOD=0则波特率正常;SMOD=1则波特率加倍。
// GF1、GF0(bit3-bit2):通用工作标志位
// 用户可以自由使用。
// PD(bit1):掉电模式设定位
// PD=0 单片机处于正常工作状态;
// PD=1 单片机进入掉电（Power Down）模式，可由外部中断或硬件复位模式唤醒。
// 进入掉电模式后，外部晶振停振，CPU、定时器、串行口全部停止工作，只有外部中断工作。
// IDL(bit0):空闲模式设定位
// IDL=0 单片机处于正常工作状态;
// IDL=1 单片机进入空闲（Idle）模式，除CPU不工作外，其余仍继续工作，
// 在空闲模式下可由任一个中断或硬件复位唤醒。

#define PCON_UART_SMOD_ENABLE	0x80

// 定时器/计数器模式控制寄存器 
// TMOD:D7		D6		D5		D4		D3		D2		D1		D0
//		GATE	C/T 	M1		M0		GATE	C/T 	M1		M0
//					定时器1 					定时器0
// TMOD是一个逐位定义的8位寄存器，但只能使用字节寻址，其字节地址为89H。
// 其中低四位(bit3-bit0)定义定时器/计数器T0，高四位(bit7-bit4)定义定时器/计数器T1。
// GATE(bit7、bit3)门控制																																														 ////
// GATE=1时，由外部中断引脚INT0、INT1来启动定时器T0、T1。
// 当INT0引脚为高电平时TR0置位，启动定时器T0；当INT1引脚为高电平时TR1置位，启动定时器T1。
// GATE=0时，仅由TR0,TR1置位分别启动定时器T0、T1。
// C/T(bit6、bit2)功能选择位
// C/T=1时为计数功能，C/T=0时为定时功能。置位时选择计数功能，清零时选择定时功能。
// M1、M0工作模式
// M1	M0	工作模式	功能说明 
// 0	0	模式0		13位定时器/计数器 
// 0	1	模式1		16位定时器/计数器 
// 1	0	模式2		自动重载8位定时器/计数器 
// 1	1	模式3		T0分为2个8位独立计数器，T1停止计数 

// AT89S51中断
// 中断描述 			中断号				中断入口地址			 
// 外部中断0(INT0)		0					0003H
// 定时/计数器0(T1) 	1					000BH
// 外部中断1(INT1)		2					0013H
// 定时/计数器1(T1) 	3					001BH
// 串行口中断(RI/TI)	4					0023H
// AT89S52特有中断
// 定时/计数器2(T2) 	5					002BH
	
#define TMOD_TIMER0_MODE_0	0x00
#define TMOD_TIMER0_MODE_1	0x01
#define TMOD_TIMER0_MODE_2	0x02
#define TMOD_TIMER0_MODE_3  0x03
#define TMOD_TIMER1_MODE_0	0x00
#define TMOD_TIMER1_MODE_1	0x10
#define TMOD_TIMER1_MODE_2	0x20
#define TMOD_TIMER1_MODE_3  0x30  

/*******************************************************************************
* 类型定义声明
*******************************************************************************/

/*******************************************************************************
* 全局变量声明
*******************************************************************************/

/*******************************************************************************
* 局部变量声明
*******************************************************************************/

/*******************************************************************************
* 全局函数声明
*******************************************************************************/
extern void uart_initial(void);

/*******************************************************************************
* 局部函数声明
*******************************************************************************/

/*******************************************************************************
* 类/结构声明
*******************************************************************************/

#endif
